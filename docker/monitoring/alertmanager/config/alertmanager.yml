# global: ## default 값 지정해주기
#   resolve_timeout: 1m # 이 시간이 지나도록 경고가 업데이트되지 않은 경우 해결되었다고 선언 | default : 5m
#   # 옵션 - email 관련 기본값설정
#   # 옵션 - slack 관련 기본값

# # 템플릿이 있을 경우 템플릿 위치 = alertmanager.yml 위치에서 /templates 안에 만듬
# templates:
# - '/etc/alertmanager/templates/*.tmpl'

# # route는 루우팅 트리와 그 하위 트리의 노드를 정의한다.
# # 모든 alert는 최상위 경로에서 라우팅 트리를 들어가며, 하위 노드를 가로지르게 되고, conitnue 가 거짓일 경우 멈추고, 아닌 경우 계속 하위트리의 노드에 일치되는지 검색하게 된다.
# route:
#   group_by: ['emailAlert'] # prometheus.yml의 targets -labels의 label_name을 의미합니다.
#   group_wait: 10s # # inhibit 조건 발생에 대한 중복을 방지하기 위한 알림 발생 전 대기시간 | default = 30s
#   group_interval: 300s # 새 알림에 대한 통지를 보내기 전 대기할 시간 | default = 5m
#   repeat_interval: 1h # 이미 있는 경우 알림을 다시 보내기전에 대기할 시간 | default = 4h
#   receiver: 'email' # 알림 설정 대상

#   # routes: # 라우트 대상 설정
#   # - match:
#   #     alertname: 'test-alram' # alertname이 일치하는 경우 알림 발송 
#   #   receiver: 'slack-channel'

# receivers:
# - name: 'email'
#   email_configs:
#   - to: 'a@a.com, b@b.com'
#     from: 'sender@c.com'
#     smarthost: 'email host'
#     auth_username: 'login username'
#     auth_identity: 'auth idenetity'
#     auth_password: 'password'
#     send_resolved: true # alert 가 해결됬을 시 알림이 보내지는 설정 | default = false
#     # headers:
#     #   subject: "Custom Warning: {{ .CommonLabels.job }} container Down"
#     # html: '{{ template "email_template.html" . }}'
# inhibit_rules:
#   - source_match:
#       severity: 'critical'
#     target_match:  # 음소거가 되어야 할 대상
#       severity: 'warning'
#     equal: ['alertname', 'name'] # value값과 동일한 값을 갖는 경우 inhibit rule 적용

# - name: slack-channel
#   slack_configs:
#   - channel: #monitoring
#     icon_url: https://avatars3.githubusercontent.com/u/3380462
#     send_resolved: true
#     title: '{{ template "custom_title" . }}'
#     text: '{{ template "custom_slack_message" . }}'
global:
  # The smarthost and SMTP sender used for mail notifications.
  smtp_smarthost: 'localhost:25'
  smtp_from: 'alertmanager@example.org'
  smtp_auth_username: 'alertmanager'
  smtp_auth_password: 'password'

# The directory from which notification templates are read.
templates:
  - '/etc/alertmanager/template/*.tmpl'

# The root route on which each incoming alert enters.
route:
  # The labels by which incoming alerts are grouped together. For example,
  # multiple alerts coming in for cluster=A and alertname=LatencyHigh would
  # be batched into a single group.
  #
  # To aggregate by all possible labels use '...' as the sole label name.
  # This effectively disables aggregation entirely, passing through all
  # alerts as-is. This is unlikely to be what you want, unless you have
  # a very low alert volume or your upstream notification system performs
  # its own grouping. Example: group_by: [...]
  group_by: ['alertname', 'cluster', 'service']

  # When a new group of alerts is created by an incoming alert, wait at
  # least 'group_wait' to send the initial notification.
  # This way ensures that you get multiple alerts for the same group that start
  # firing shortly after another are batched together on the first
  # notification.
  group_wait: 30s

  # When the first notification was sent, wait 'group_interval' to send a batch
  # of new alerts that started firing for that group.
  group_interval: 5m

  # If an alert has successfully been sent, wait 'repeat_interval' to
  # resend them.
  repeat_interval: 3h

  # A default receiver
  receiver: team-X-mails

  # All the above attributes are inherited by all child routes and can
  # overwritten on each.

  # The child route trees.
  routes:
    # This routes performs a regular expression match on alert labels to
    # catch alerts that are related to a list of services.
    - matchers:
        - service=~"foo1|foo2|baz"
      receiver: team-X-mails
      # The service has a sub-route for critical alerts, any alerts
      # that do not match, i.e. severity != critical, fall-back to the
      # parent node and are sent to 'team-X-mails'
      routes:
        - matchers:
            - severity="critical"
          receiver: team-X-pager
    - matchers:
        - service="files"
      receiver: team-Y-mails

      routes:
        - matchers:
            - severity="critical"
          receiver: team-Y-pager

    # This route handles all alerts coming from a database service. If there's
    # no team to handle it, it defaults to the DB team.
    - matchers:
        - service="database"
      receiver: team-DB-pager
      # Also group alerts by affected database.
      group_by: [alertname, cluster, database]
      routes:
        - matchers:
            - owner="team-X"
          receiver: team-X-pager
          continue: true
        - matchers:
            - owner="team-Y"
          receiver: team-Y-pager


# Inhibition rules allow to mute a set of alerts given that another alert is
# firing.
# We use this to mute any warning-level notifications if the same alert is
# already critical.
inhibit_rules:
  - source_matchers: [severity="critical"]
    target_matchers: [severity="warning"]
    # Apply inhibition if the alertname is the same.
    # CAUTION:
    #   If all label names listed in `equal` are missing
    #   from both the source and target alerts,
    #   the inhibition rule will apply!
    equal: [alertname, cluster, service]


receivers:
  - name: 'team-X-mails'
    email_configs:
      - to: 'team-X+alerts@example.org'

  - name: 'team-X-pager'
    email_configs:
      - to: 'team-X+alerts-critical@example.org'
    pagerduty_configs:
      - service_key: <team-X-key>

  - name: 'team-Y-mails'
    email_configs:
      - to: 'team-Y+alerts@example.org'

  - name: 'team-Y-pager'
    pagerduty_configs:
      - service_key: <team-Y-key>

  - name: 'team-DB-pager'
    pagerduty_configs:
      - service_key: <team-DB-key>